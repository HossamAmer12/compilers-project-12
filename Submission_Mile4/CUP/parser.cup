
import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.InputStreamReader;
	
	
parser code {:

public ArrayList<String> lines; 

public parser(java_cup.runtime.Scanner s, String fileName) {
	this(s);
	SemanticException.fileName=fileName;
	lines = readLines();
	
}

public ArrayList<String> readLines() {
		ArrayList<String> lines = new ArrayList<String>();
		try {
			FileInputStream fstream = new FileInputStream("Algebra.decaf");

			DataInputStream in = new DataInputStream(fstream);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			String strLine;

			while ((strLine = br.readLine()) != null) {
				lines.add(strLine);
			}

			in.close();
		} catch (Exception e) {
			System.err.println("Error: " + e.getMessage());
		}
		return lines;
	}

:}	
	
	
/* Terminals (tokens returned by the scanner). */
terminal		Token	SM, PO, MO, TO, DO, NM,FA,LP,RP,RB,LB,AO,MD,EQ,NE,LO,LA,BL,ST,ID,ERROR;
terminal		Token	KW_class, KW_static, KW_else, KW_if, KW_float, KW_boolean, KW_String, KW_return, KW_while, KW_int;
 	
/* Non-terminals */
nonterminal	ClassDecl		ClassDecl;
nonterminal	MethodDecls		MethodDecls;
nonterminal	MethodDecl		MethodDecl;

nonterminal	Type		Type;
nonterminal	Block		Block;
nonterminal	FormalParams		FormalParams;
nonterminal	ProperFormalParams		ProperFormalParams;
nonterminal	FormalParam		FormalParam;
nonterminal	Statements		Statements;
nonterminal	Statement		Statement;

nonterminal	LocalVarDecl		LocalVarDecl;
nonterminal	AssignStmt		AssignStmt;
nonterminal	IfStmt		IfStmt;
nonterminal	WhileStmt		WhileStmt;
nonterminal	ReturnStmt		ReturnStmt;

nonterminal	Expression		Expression;
nonterminal	ConditionalAndExpr		ConditionalAndExpr;
nonterminal	EqualityExpr		EqualityExpr;
nonterminal	AdditiveExpr		AdditiveExpr;
nonterminal	MultiplicativeExpr		MultiplicativeExpr;
nonterminal	PrimaryExpr		PrimaryExpr;
nonterminal	CallExpr		CallExpr;

nonterminal	ActualParams		ActualParams;
nonterminal	ProperActualParams		ProperActualParams;



/* Precedences */
precedence left PO, MO;
precedence left TO, DO;
precedence left KW_else;

/* The grammar */


ClassDecl ::= KW_class ID LB MethodDecls: m  RB
              {:
              	RESULT = new ClassDecl(m);
              :} 
              | error 
              {:
              	RESULT = new ClassDecl();
              :};


MethodDecls ::= MethodDecls:el MethodDecl:e
			  {:
			  	 el.add(e);
			     RESULT = el;
			  :} 
			  |  
			  {: 
			     RESULT = new MethodDecls();
			  :};              

MethodDecl  ::= KW_static: tok Type: t ID: id LP FormalParams: f RP Block: b
				 {:
				 	RESULT = new MethodDecl(t, f, b, id.getLexeme(), tok.line, 
				 	tok.at, parser.lines.get(id.line-1));
				 :};

FormalParams ::= FormalParams:f1 FA FormalParam:f 
				{: 
					f1.add(f);
					RESULT = f1;
				:} 
				| FormalParam: f
				{: 
					FormalParams f1 = new FormalParams();
					f1.add(f);
					RESULT = f1;
				:}
				| 
				{: 
					RESULT = new FormalParams();
				:};


FormalParam ::= Type: t ID: id
				{: 
					RESULT = new FormalParam(id.getLexeme(), t);
				:};

Type ::= KW_int:a
		{: 
			RESULT = new Type(a.getLexeme()); 
		:} 
		| KW_float: b 
		{: 
			RESULT = new Type(b.getLexeme()); 
		:}  
		| KW_boolean: c 
		{: 
			RESULT = new Type(c.getLexeme()); 
		:}  
		| KW_String: d 
		{: 
			RESULT = new Type(d.getLexeme()); 
		:};

Block ::= LB Statements: st RB
		{: 
			RESULT = new Block(st); 
		:};

Statements ::= Statements: stats Statement: st
			{: 
				stats.add(st);
				RESULT = stats;
				
			:}
			| 
			{:
				RESULT = new Statements();
			:};

Statement ::= Block: block
			{:
				RESULT = new Statement(block);
			:}	
			| LocalVarDecl: lv
			{:
				RESULT = new Statement(lv);
			:}
			| AssignStmt: ass
			{:
				RESULT = new Statement(ass);
			:} 
			| IfStmt: ifstmt
			{:
				RESULT = new Statement(ifstmt);
			:} 
			| WhileStmt: whilestmt
			{:
				RESULT = new Statement(whilestmt);
			:} 
			| ReturnStmt: returnstmt
			{:
				RESULT = new Statement(returnstmt);
			:};

LocalVarDecl ::= Type: t ID: id SM
			{:
				RESULT = new LocalVarDecl(id.getLexeme(), t, id.line, id.at,
				parser.lines.get(id.line-1));
			:};	 

AssignStmt ::= ID: id AO Expression: e SM 
			{:	
				RESULT = new AssignStmt(id.getLexeme(), e, id, parser.lines.get(parser.lines.size()-1));
			:};

IfStmt ::= KW_if LP Expression: e RP: tok Statement: stmt KW_else Statement: elsestmt
			{:
				RESULT = new IfStmt(e, stmt, elsestmt, tok.line, tok.at, parser.lines.get(tok.line-1));
			:}
			| KW_if LP Expression: e RP: tok Statement: stmt
			{:
				RESULT = new IfStmt(e, stmt, tok.line, tok.at, parser.lines.get(tok.line-1)); 
			:};


WhileStmt ::= KW_while LP: tok Expression: exp RP Statement: stmt
			{:
				RESULT = new WhileStmt(exp, stmt, tok.line, tok.at, parser.lines.get(tok.line-1));
			:};

ReturnStmt ::= KW_return: tok Expression: exp SM 
			{:
				RESULT = new ReturnStmt(exp, tok.line, tok.at, parser.lines.get(tok.line-1));
			:};

Expression ::= ConditionalAndExpr: andExp
			{:
				RESULT = andExp;
			:} 
			| Expression: exp LO: tok ConditionalAndExpr: andExp
			{: 
			
				// System.out.println("Hello");
				RESULT = new Expression(andExp, exp, tok.line, tok.at, parser.lines.get(tok.line-1));
			:};	

ConditionalAndExpr ::= EqualityExpr: equality
					{:
						RESULT = equality;
					:}
					| ConditionalAndExpr: andExp LA: tok EqualityExpr: equality
					{:
						RESULT = new ConditionalAndExpr(equality, andExp);
					:};

EqualityExpr ::= AdditiveExpr: add
				{:
					RESULT = add;
				:} 
				| EqualityExpr: equality EQ: tok AdditiveExpr: add
				{:
				RESULT = new EqualityExpr(add, EqualityExpr.EQ, equality, tok.line, tok.at, parser.lines.get(tok.line-1));
				:} 
				| EqualityExpr: equality NE: tok AdditiveExpr: add
				{:
					RESULT = new EqualityExpr(add, EqualityExpr.NE, equality, tok.line, tok.at, parser.lines.get(tok.line-1));
				:};

AdditiveExpr ::= MultiplicativeExpr: multiply
				{:
					 RESULT = multiply;
				:} 
				| AdditiveExpr: add PO: tok MultiplicativeExpr: multiply
				{:
					RESULT = new AdditiveExpr(multiply, AdditiveExpr.PO, add, tok.line, tok.at, parser.lines.get(tok.line-1));
				:}		
				 | AdditiveExpr: add MO: tok MultiplicativeExpr: multiply
				 {:
					RESULT = new AdditiveExpr(multiply, AdditiveExpr.MO, add, tok.line, tok.at, parser.lines.get(tok.line-1));
				:};


MultiplicativeExpr ::= PrimaryExpr: primary
				{:
					 RESULT = primary;
				:} 
				| MultiplicativeExpr: multiply TO: tok PrimaryExpr: primary
				{:
					RESULT = new MultiplicativeExpr(primary,MultiplicativeExpr.TO, multiply, tok.line, tok.at, parser.lines.get(tok.line-1));
				:}		
				 | MultiplicativeExpr: multiply DO: tok PrimaryExpr: primary
				 {:
					RESULT = new MultiplicativeExpr(primary, MultiplicativeExpr.DO, multiply, tok.line, tok.at, parser.lines.get(tok.line-1));
				:}
				| MultiplicativeExpr: multiply MD: tok PrimaryExpr: primary
				{:
					RESULT = new MultiplicativeExpr(primary, MultiplicativeExpr.MD, multiply, tok.line, tok.at, parser.lines.get(tok.line-1));
				:};

PrimaryExpr ::= NM: nm
				{:
					PrimaryExpr value = new PrimaryExpr(nm.getLexeme());
					value.token = nm;
					value.line = parser.lines.get(nm.line - 1);
					
					RESULT = value;
			
					//RESULT = new PrimaryExpr(nm.getLexeme());
				:} 
				| BL: bl
				{:
				
					PrimaryExpr value = new PrimaryExpr(bl.getLexeme(), null, null);
					value.token = bl;
					value.line = parser.lines.get(bl.line);
					
					
					
					RESULT = value;
					
				 //	RESULT = new PrimaryExpr(bl.getLexeme(), null, null);
				:}
				| ST: st
				{:
				
					PrimaryExpr value = new PrimaryExpr(null, st.getLexeme(), null);
					value.token = st;
					value.line = parser.lines.get(st.line - 1);
					
					RESULT = value;
				 	// RESULT = new PrimaryExpr(null, st.getLexeme(), null);
				:}
				| ID: idLexeme LP ActualParams: act RP
				{:
				
					PrimaryExpr value = new PrimaryExpr(act, idLexeme.getLexeme());
					value.token = idLexeme;
					value.line = parser.lines.get(idLexeme.line - 1);
					
					RESULT = value;
					
					
					 // RESULT = new PrimaryExpr(act, idLexeme.getLexeme());
				:}	 
				| ID: idLexeme
				{:
				
					PrimaryExpr value = new PrimaryExpr(null, null, idLexeme.getLexeme());
					value.token = idLexeme;
					value.line = parser.lines.get(idLexeme.line - 1);
				
					RESULT = value;
				 	// RESULT = new PrimaryExpr(null, null, idLexeme.getLexeme());
				:}  
				| LP: lp Expression: exp RP
				{:
					
					PrimaryExpr value = new PrimaryExpr(exp);
					value.token = lp;
					value.line = parser.lines.get(lp.line - 1);
				
					RESULT = value;
				 	// RESULT = new PrimaryExpr(exp);
				:};

ActualParams::= ProperActualParams: pAs
				{:
				
					// System.out.println("Hello from actual params");
					RESULT = new ActualParams(pAs);
					// System.out.println("RESULT: " + RESULT);
				:} 
				| 
				{:
					
					ActualParams paps= new ActualParams();
					RESULT = paps;
				:};
			

ProperActualParams::= ProperActualParams: pAs FA Expression: exp
					{:
						pAs.add(exp);
						RESULT = pAs;
					:}	 
					| Expression: exp
					{:
						
						ProperActualParams pAs = new ProperActualParams();
						pAs.add(exp);
						// System.out.println("One parameter: " + exp + ",  " + pAs);
						RESULT = pAs;
					:};
