
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 27 04:51:11 EET 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.InputStreamReader;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 27 04:51:11 EET 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\007\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\002\000\002\004\011" +
    "\000\002\007\005\000\002\007\003\000\002\007\002\000" +
    "\002\011\004\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\006\005\000\002\012" +
    "\004\000\002\012\002\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\005\000\002\015\006\000\002" +
    "\016\011\000\002\016\007\000\002\017\007\000\002\020" +
    "\005\000\002\021\003\000\002\021\005\000\002\022\003" +
    "\000\002\022\005\000\002\023\003\000\002\023\005\000" +
    "\002\023\005\000\002\024\003\000\002\024\005\000\002" +
    "\024\005\000\002\025\003\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\006\000\002\026\003\000" +
    "\002\026\005\000\002\030\003\000\002\030\002\000\002" +
    "\031\005\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\006\003\006\031\004\001\002\000\004\027" +
    "\010\001\002\000\004\002\007\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\000\001\002\000\004\016\011\001" +
    "\002\000\006\015\ufffd\032\ufffd\001\002\000\006\015\015" +
    "\032\013\001\002\000\012\035\017\036\020\037\022\042" +
    "\016\001\002\000\006\015\ufffe\032\ufffe\001\002\000\004" +
    "\002\001\001\002\000\004\027\ufff7\001\002\000\004\027" +
    "\ufff6\001\002\000\004\027\ufff5\001\002\000\004\027\023" +
    "\001\002\000\004\027\ufff4\001\002\000\004\013\024\001" +
    "\002\000\016\012\ufff9\014\ufff9\035\017\036\020\037\022" +
    "\042\016\001\002\000\004\027\141\001\002\000\006\012" +
    "\ufffa\014\ufffa\001\002\000\006\012\031\014\030\001\002" +
    "\000\004\016\034\001\002\000\012\035\017\036\020\037" +
    "\022\042\016\001\002\000\006\012\ufffb\014\ufffb\001\002" +
    "\000\006\015\ufffc\032\ufffc\001\002\000\026\015\ufff1\016" +
    "\ufff1\027\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\001\002\000\026\015\045\016\034\027" +
    "\043\034\042\035\017\036\020\037\022\040\047\041\036" +
    "\042\016\001\002\000\004\013\135\001\002\000\030\015" +
    "\uffeb\016\uffeb\027\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\001\002\000\030\015" +
    "\uffef\016\uffef\027\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\001\002\000\030\015" +
    "\uffee\016\uffee\027\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\001\002\000\004\013" +
    "\127\001\002\000\004\017\124\001\002\000\004\027\122" +
    "\001\002\000\032\015\ufff3\016\ufff3\027\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\001\002\000\030\015\ufff0\016\ufff0\027\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0" +
    "\042\ufff0\001\002\000\014\011\063\013\054\025\065\026" +
    "\060\027\064\001\002\000\030\015\uffec\016\uffec\027\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\001\002\000\026\015\ufff2\016\ufff2\027\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\001\002\000\030\015\uffed\016\uffed\027\uffed\033\uffed" +
    "\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042" +
    "\uffed\001\002\000\032\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\012\uffda\014\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\001\002\000\014\011\063\013\054\025\065" +
    "\026\060\027\064\001\002\000\014\004\uffe4\012\uffe4\014" +
    "\uffe4\023\uffe4\024\075\001\002\000\020\004\uffe2\012\uffe2" +
    "\014\uffe2\021\077\022\100\023\uffe2\024\uffe2\001\002\000" +
    "\032\004\uffdd\005\uffdd\006\uffdd\007\105\010\106\012\uffdd" +
    "\014\uffdd\020\107\021\uffdd\022\uffdd\023\uffdd\024\uffdd\001" +
    "\002\000\032\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4" +
    "\012\uffd4\014\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\001\002\000\006\004\117\023\073\001\002\000\024" +
    "\004\uffe0\005\102\006\103\012\uffe0\014\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\001\002\000\032\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\012\uffd6\014\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\024\uffd6\001\002\000\034\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\066\014" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\001\002" +
    "\000\032\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012" +
    "\uffd5\014\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\001\002\000\016\011\063\013\054\014\uffcf\025\065\026" +
    "\060\027\064\001\002\000\006\012\115\014\uffd0\001\002" +
    "\000\010\012\uffcd\014\uffcd\023\073\001\002\000\004\014" +
    "\072\001\002\000\032\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\012\uffd3\014\uffd3\020\uffd3\021\uffd3\022\uffd3\023" +
    "\uffd3\024\uffd3\001\002\000\014\011\063\013\054\025\065" +
    "\026\060\027\064\001\002\000\014\004\uffe3\012\uffe3\014" +
    "\uffe3\023\uffe3\024\075\001\002\000\014\011\063\013\054" +
    "\025\065\026\060\027\064\001\002\000\020\004\uffe1\012" +
    "\uffe1\014\uffe1\021\077\022\100\023\uffe1\024\uffe1\001\002" +
    "\000\014\011\063\013\054\025\065\026\060\027\064\001" +
    "\002\000\014\011\063\013\054\025\065\026\060\027\064" +
    "\001\002\000\024\004\uffde\005\102\006\103\012\uffde\014" +
    "\uffde\021\uffde\022\uffde\023\uffde\024\uffde\001\002\000\014" +
    "\011\063\013\054\025\065\026\060\027\064\001\002\000" +
    "\014\011\063\013\054\025\065\026\060\027\064\001\002" +
    "\000\032\004\uffdb\005\uffdb\006\uffdb\007\105\010\106\012" +
    "\uffdb\014\uffdb\020\107\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\001\002\000\014\011\063\013\054\025\065\026\060\027" +
    "\064\001\002\000\014\011\063\013\054\025\065\026\060" +
    "\027\064\001\002\000\014\011\063\013\054\025\065\026" +
    "\060\027\064\001\002\000\032\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\012\uffd7\014\uffd7\020\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\001\002\000\032\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\012\uffd8\014\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\001\002\000\032\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\010\uffd9\012\uffd9\014\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\001\002\000\032" +
    "\004\uffdc\005\uffdc\006\uffdc\007\105\010\106\012\uffdc\014" +
    "\uffdc\020\107\021\uffdc\022\uffdc\023\uffdc\024\uffdc\001\002" +
    "\000\024\004\uffdf\005\102\006\103\012\uffdf\014\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\001\002\000\014\011\063" +
    "\013\054\025\065\026\060\027\064\001\002\000\010\012" +
    "\uffce\014\uffce\023\073\001\002\000\030\015\uffe5\016\uffe5" +
    "\027\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\001\002\000\006\014\121\023\073" +
    "\001\002\000\032\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\012\uffd1\014\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\001\002\000\004\004\123\001\002\000\030\015" +
    "\uffea\016\uffea\027\uffea\033\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\042\uffea\001\002\000\014\011" +
    "\063\013\054\025\065\026\060\027\064\001\002\000\006" +
    "\004\126\023\073\001\002\000\030\015\uffe9\016\uffe9\027" +
    "\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\001\002\000\014\011\063\013\054\025" +
    "\065\026\060\027\064\001\002\000\006\014\131\023\073" +
    "\001\002\000\024\016\034\027\043\034\042\035\017\036" +
    "\020\037\022\040\047\041\036\042\016\001\002\000\030" +
    "\015\uffe7\016\uffe7\027\uffe7\033\133\034\uffe7\035\uffe7\036" +
    "\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\001\002\000\024" +
    "\016\034\027\043\034\042\035\017\036\020\037\022\040" +
    "\047\041\036\042\016\001\002\000\030\015\uffe8\016\uffe8" +
    "\027\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\001\002\000\014\011\063\013\054" +
    "\025\065\026\060\027\064\001\002\000\006\014\137\023" +
    "\073\001\002\000\024\016\034\027\043\034\042\035\017" +
    "\036\020\037\022\040\047\041\036\042\016\001\002\000" +
    "\030\015\uffe6\016\uffe6\027\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\001\002\000" +
    "\006\012\ufff8\014\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\011\001\001\000\004\004\013\001" +
    "\001\000\004\005\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\024\007\026\011\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\032" +
    "\001\001\000\006\005\024\011\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\034\001\001\000\022" +
    "\005\043\006\045\013\050\014\037\015\040\016\051\017" +
    "\047\020\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\021\060\022\054\023\055\024\061\025" +
    "\056\026\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\021\117\022" +
    "\054\023\055\024\061\025\056\026\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\067\022" +
    "\054\023\055\024\061\025\056\026\052\030\070\031\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\022\073\023\055\024\061" +
    "\025\056\026\052\001\001\000\002\001\001\000\012\023" +
    "\075\024\061\025\056\026\052\001\001\000\002\001\001" +
    "\000\010\024\113\025\056\026\052\001\001\000\010\024" +
    "\100\025\056\026\052\001\001\000\002\001\001\000\006" +
    "\025\112\026\052\001\001\000\006\025\103\026\052\001" +
    "\001\000\002\001\001\000\004\026\111\001\001\000\004" +
    "\026\110\001\001\000\004\026\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\021\115\022\054\023\055\024" +
    "\061\025\056\026\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\021\124\022\054\023\055" +
    "\024\061\025\056\026\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\127\022\054\023\055\024\061" +
    "\025\056\026\052\001\001\000\002\001\001\000\022\005" +
    "\043\006\045\013\131\014\037\015\040\016\051\017\047" +
    "\020\036\001\001\000\002\001\001\000\022\005\043\006" +
    "\045\013\133\014\037\015\040\016\051\017\047\020\036" +
    "\001\001\000\002\001\001\000\016\021\135\022\054\023" +
    "\055\024\061\025\056\026\052\001\001\000\002\001\001" +
    "\000\022\005\043\006\045\013\137\014\037\015\040\016" +
    "\051\017\047\020\036\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public ArrayList<String> lines; 

public parser(java_cup.runtime.Scanner s, String fileName) {
	this(s);
	SemanticException.fileName=fileName;
	lines = readLines();
	
}

public ArrayList<String> readLines() {
		ArrayList<String> lines = new ArrayList<String>();
		try {
			FileInputStream fstream = new FileInputStream("Algebra.decaf");

			DataInputStream in = new DataInputStream(fstream);
			BufferedReader br = new BufferedReader(new InputStreamReader(in));
			String strLine;

			while ((strLine = br.readLine()) != null) {
				lines.add(strLine);
			}

			in.close();
		} catch (Exception e) {
			System.err.println("Error: " + e.getMessage());
		}
		return lines;
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ProperActualParams ::= Expression 
            {
              ProperActualParams RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						ProperActualParams pAs = new ProperActualParams();
						pAs.add(exp);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProperActualParams",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ProperActualParams ::= ProperActualParams FA Expression 
            {
              ProperActualParams RESULT =null;
		int pAsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pAsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ProperActualParams pAs = (ProperActualParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						pAs.add(exp);
						RESULT = pAs;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProperActualParams",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ActualParams ::= 
            {
              ActualParams RESULT =null;
		
					RESULT = null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActualParams",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ActualParams ::= ProperActualParams 
            {
              ActualParams RESULT =null;
		int pAsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pAsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProperActualParams pAs = (ProperActualParams)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new ActualParams(pAs);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ActualParams",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PrimaryExpr ::= LP Expression RP 
            {
              PrimaryExpr RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				 	RESULT = new PrimaryExpr(exp);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PrimaryExpr ::= ID 
            {
              PrimaryExpr RESULT =null;
		int idLexemeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idLexemeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token idLexeme = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				 	RESULT = new PrimaryExpr(null, null, idLexeme.getLexeme());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PrimaryExpr ::= ID LP ActualParams RP 
            {
              PrimaryExpr RESULT =null;
		int idLexemeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idLexemeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token idLexeme = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ActualParams act = (ActualParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					 RESULT = new PrimaryExpr(act, idLexeme.getLexeme());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PrimaryExpr ::= ST 
            {
              PrimaryExpr RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token st = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				 	RESULT = new PrimaryExpr(null, st.getLexeme(), null);;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PrimaryExpr ::= BL 
            {
              PrimaryExpr RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token bl = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				 	RESULT = new PrimaryExpr(bl.getLexeme(), null, null);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PrimaryExpr ::= NM 
            {
              PrimaryExpr RESULT =null;
		int nmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token nm = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new PrimaryExpr(nm.getLexeme());
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MultiplicativeExpr ::= MultiplicativeExpr MD PrimaryExpr 
            {
              MultiplicativeExpr RESULT =null;
		int multiplyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int multiplyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultiplicativeExpr multiply = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int primaryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int primaryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpr primary = (PrimaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new MultiplicativeExpr(primary, MultiplicativeExpr.MD, multiply, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MultiplicativeExpr ::= MultiplicativeExpr DO PrimaryExpr 
            {
              MultiplicativeExpr RESULT =null;
		int multiplyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int multiplyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultiplicativeExpr multiply = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int primaryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int primaryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpr primary = (PrimaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new MultiplicativeExpr(primary, MultiplicativeExpr.DO, multiply, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MultiplicativeExpr ::= MultiplicativeExpr TO PrimaryExpr 
            {
              MultiplicativeExpr RESULT =null;
		int multiplyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int multiplyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MultiplicativeExpr multiply = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int primaryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int primaryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpr primary = (PrimaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new MultiplicativeExpr(primary,MultiplicativeExpr.TO, multiply, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MultiplicativeExpr ::= PrimaryExpr 
            {
              MultiplicativeExpr RESULT =null;
		int primaryleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int primaryright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PrimaryExpr primary = (PrimaryExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					 RESULT = primary;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AdditiveExpr ::= AdditiveExpr MO MultiplicativeExpr 
            {
              AdditiveExpr RESULT =null;
		int addleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int addright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AdditiveExpr add = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multiplyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multiplyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpr multiply = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new AdditiveExpr(multiply, AdditiveExpr.MO, add, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AdditiveExpr ::= AdditiveExpr PO MultiplicativeExpr 
            {
              AdditiveExpr RESULT =null;
		int addleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int addright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AdditiveExpr add = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int multiplyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multiplyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpr multiply = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new AdditiveExpr(multiply, AdditiveExpr.PO, add, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AdditiveExpr ::= MultiplicativeExpr 
            {
              AdditiveExpr RESULT =null;
		int multiplyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int multiplyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MultiplicativeExpr multiply = (MultiplicativeExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					 RESULT = multiply;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EqualityExpr ::= EqualityExpr NE AdditiveExpr 
            {
              EqualityExpr RESULT =null;
		int equalityleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int equalityright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EqualityExpr equality = (EqualityExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int addright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpr add = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new EqualityExpr(add, EqualityExpr.NE, equality, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EqualityExpr ::= EqualityExpr EQ AdditiveExpr 
            {
              EqualityExpr RESULT =null;
		int equalityleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int equalityright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		EqualityExpr equality = (EqualityExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int addleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int addright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpr add = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new EqualityExpr(add, EqualityExpr.EQ, equality, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EqualityExpr ::= AdditiveExpr 
            {
              EqualityExpr RESULT =null;
		int addleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int addright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AdditiveExpr add = (AdditiveExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = add;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqualityExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ConditionalAndExpr ::= ConditionalAndExpr LA EqualityExpr 
            {
              ConditionalAndExpr RESULT =null;
		int andExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int andExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConditionalAndExpr andExp = (ConditionalAndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int equalityleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int equalityright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EqualityExpr equality = (EqualityExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = new ConditionalAndExpr(equality, andExp);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ConditionalAndExpr ::= EqualityExpr 
            {
              ConditionalAndExpr RESULT =null;
		int equalityleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int equalityright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		EqualityExpr equality = (EqualityExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = equality;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpr",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expression ::= Expression LO ConditionalAndExpr 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int andExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int andExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalAndExpr andExp = (ConditionalAndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				RESULT = new Expression(andExp, exp, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= ConditionalAndExpr 
            {
              Expression RESULT =null;
		int andExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int andExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConditionalAndExpr andExp = (ConditionalAndExpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = andExp;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ReturnStmt ::= KW_return Expression SM 
            {
              ReturnStmt RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new ReturnStmt(exp, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WhileStmt ::= KW_while LP Expression RP Statement 
            {
              WhileStmt RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new WhileStmt(exp, stmt, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IfStmt ::= KW_if LP Expression RP Statement 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new IfStmt(e, stmt, tok.line, tok.at, parser.lines.get(parser.lines.size()-1)); 
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IfStmt ::= KW_if LP Expression RP Statement KW_else Statement 
            {
              IfStmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elsestmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsestmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement elsestmt = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new IfStmt(e, stmt, elsestmt, tok.line, tok.at, parser.lines.get(parser.lines.size()-1));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AssignStmt ::= ID AO Expression SM 
            {
              AssignStmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			
				RESULT = new AssignStmt(id.getLexeme(), e, id, parser.lines.get(parser.lines.size()-1));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LocalVarDecl ::= Type ID SM 
            {
              LocalVarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = new LocalVarDecl(id.getLexeme(), t, id.line, id.at,
				parser.lines.get(parser.lines.size()-1));
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= ReturnStmt 
            {
              Statement RESULT =null;
		int returnstmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int returnstmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ReturnStmt returnstmt = (ReturnStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Statement(returnstmt);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= WhileStmt 
            {
              Statement RESULT =null;
		int whilestmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whilestmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileStmt whilestmt = (WhileStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Statement(whilestmt);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= IfStmt 
            {
              Statement RESULT =null;
		int ifstmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifstmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStmt ifstmt = (IfStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Statement(ifstmt);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= AssignStmt 
            {
              Statement RESULT =null;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignStmt ass = (AssignStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Statement(ass);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Statement ::= LocalVarDecl 
            {
              Statement RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LocalVarDecl lv = (LocalVarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Statement(lv);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Statement ::= Block 
            {
              Statement RESULT =null;
		int blockleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blockright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block block = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new Statement(block);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Statements ::= 
            {
              Statements RESULT =null;
		
				RESULT = new Statements();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Statements ::= Statements Statement 
            {
              Statements RESULT =null;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements stats = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				stats.add(st);
				RESULT = stats;
				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Block ::= LB Statements RB 
            {
              Block RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statements st = (Statements)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = new Block(st); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= KW_String 
            {
              Type RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RESULT = new Type(d.getLexeme()); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= KW_boolean 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RESULT = new Type(c.getLexeme()); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= KW_float 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token b = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RESULT = new Type(b.getLexeme()); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= KW_int 
            {
              Type RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
			RESULT = new Type(a.getLexeme()); 
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FormalParam ::= Type ID 
            {
              FormalParam RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					RESULT = new FormalParam(id.getLexeme(), t);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParam",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FormalParams ::= 
            {
              FormalParams RESULT =null;
		 
					RESULT = new FormalParams();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParams",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FormalParams ::= FormalParam 
            {
              FormalParams RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParam f = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					FormalParams f1 = new FormalParams();
					f1.add(f);
					RESULT = f1;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParams",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FormalParams ::= FormalParams FA FormalParam 
            {
              FormalParams RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalParams f1 = (FormalParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalParam f = (FormalParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					f1.add(f);
					RESULT = f1;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FormalParams",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MethodDecl ::= KW_static Type ID LP FormalParams RP Block 
            {
              MethodDecl RESULT =null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token tok = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalParams f = (FormalParams)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block b = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				 	RESULT = new MethodDecl(t, f, b, id.getLexeme(), tok.line, 
				 	tok.at, parser.lines.get(parser.lines.size()-1));
				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MethodDecls ::= 
            {
              MethodDecls RESULT =null;
		 
			     RESULT = new MethodDecls();
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MethodDecls ::= MethodDecls MethodDecl 
            {
              MethodDecls RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDecls el = (MethodDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDecl e = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			  	 el.add(e);
			     RESULT = el;
			  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDecls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ClassDecl ::= error 
            {
              ClassDecl RESULT =null;
		
              	RESULT = new ClassDecl();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ClassDecl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ClassDecl start_val = (ClassDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ClassDecl ::= KW_class ID LB MethodDecls RB 
            {
              ClassDecl RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDecls m = (MethodDecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              	RESULT = new ClassDecl(m);
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDecl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

